Code Standards&Code Review Process
Code Standarts. Что использовать, чтобы писать чистый, одинаковый по стилистики код в команде на проекте?
Code Smells. Примеры плохого кода, который стоило бы поправить.
Refactoring. Принципы, которыми стоит руководствоваться при рефакторинге кода.





Code Standarts. Что использовать, чтобы писать чистый, одинаковый по стилистики код в команде на проекте?

а)Руководства по стилю кода
	- можно самому писать
	- Google JavaScript Style Guide
	- Airbnb JavaScript Style Guide 
	- Idiomatic.JS
	- StandardJS и др.

б) Автоматизированные средства проверки (линтеры)
	- JSLint
	- JSHint
	- ESLint	
----------------------------------------------------------
Code Standarts

Преимущества внедрения стандартов кодирования:
Обеспечивает единообразие кода, созданного разными инженерами.
Позволяет создавать повторно используемый код.
Облегчает обнаружение ошибок.
Сделайте код более простым, читабельным и легким в обслуживании.
Повышение эффективности программиста и быстрое получение результатов.

Фигурные скобки
	- если без переноса они не нужны
	- не разделять строки без фигурных скобок
	- если строка длинная, то и скобки делаем и перенос

Длинные строки
	- если оч длинные, то разделяем бэктиками
	- Макс длину строки согласовывают в команде. Обычно это 80 или 120 символов.

Отступы
	а) горизонтальные (для разбивки на «логические блоки»)
	- прбелы 
	- табы
	б) вертикальные
	- Вставляйте дополнительный перевод строки туда, где это сделает код более читаемым.
	- Не должно быть более 9 строк кода подряд без вертикального отступа.

Точка с запятой
	- js ПРАКТИЧЕСКИ всегда интерпретирует перенос как точку с запятой, но лучше её явно указывать где надо
	- при огромном опыте можно не ставить, но большинство ставит

Уровни вложенности
???	- можно использовать директиву continue

Размещение функций
	- есть несколько вариантов
		1) сначала фн, потом код
		2) сначала код потом фн
		3) смешанный фн объявляется там, где она используется впервые
	чаще используется второй (т.к. может нам не надо будет знать как она рабоатет, особенно если название хорошее)

CLEAN CODE

1. KISS keep it short simple / keep it simple, stupid
не усложняй
Чем проще код, тем легче в нем разобраться, как вам, так и другим людям, занимающимся его поддержкой. Под простотой главным образом имеется в виду отказ от использования хитроумных приемов и ненужного усложнения.
	
2. DRY (DIE)
Принцип призывает Вас не повторяться при написании кода. Все, что Вы пишете в проекте, должно быть определено только один раз. При не соблюдении этого принципа, программист будет вынужден вносить изменения в несколько повторяющихся фрагментов кода, вместо одного. Также дублирующийся код приводит к разрастанию программы, а значит, усложняет ее понимание, читабельность.

3. YAGNI  You ain't gonna need it! 
Вам это не понадобится! Его суть в том, чтобы реализовать только поставленные задачи и отказаться от избыточного функционала.
Проще говоря, вам не стоит писать функциональность наперед, если прямо сейчас в ней нет необходимости. Желание написать код на будущее может иметь много неприятных последствий

4. Комментарии
Поясняй код при необходимости, где это возможно.
	- Отложенные задачи (TODO)

5. Пробелы в конце строки
Пробелы в конце строки являются излишними.

6. Именование файлов
Придерживайтесь единого стиля именования файлов в проекте

----------------------------------------------------------
Code Smells. Примеры плохого кода, который стоило бы поправить.

if (n < 0) {alert(`Степень ${n} не поддерживается`);}

if (n < 0)
  alert(`Степень ${n} не поддерживается`);



function pow(x,n)
{
  let result=1;
  for(let i=0;i<n;i++) {result*=x;}
  return result;
}

let x=prompt("x?",''), n=prompt("n?",'')
if (n<=0)
{
  alert(`Степень ${n} не поддерживается, введите целую степень, большую 0`);
}
else
{
  alert(pow(x,n))
}

----------------------------------------------------------
Refactoring. Принципы, которыми стоит руководствоваться при рефакторинге кода.

Принципы КОГДА: 
	1. Применяйте рефакторинг при добавлении новой функции.
	2. Применяйте рефакторинг, если требуется исправить ошибку.
	3. Применяйте рефакторинг при разборе кода.

Ещё принципы:
	1. Скрыть «Как» с «Что»
	2. Стремление к последовательности
	3. Избегайте глубокого вложения
	4. Избегайте дублирования с умом

ЦЕЛЬ рефакторинга:
	- улучшить проект существующего кода;
	- ! найти ошибки;
	- ! сделать код более понятным для других участников команды;
	- сделать код менее раздражающим;
	- ! упростить добавление нового кода.

ЧТО рефакторим:
	- повторы
	- комментарии, которые объясняют логику (есть исключения)
	- непонятные переменные
	- Большие методы, классы (делим их на более мелкие)
	- Длинный список параметров
[x = wtf2222222222222222222222222222222222222; x = wtf2222222222222222222222222222222222222;]//123

----------------------------------------------------------
SOLID (принципы ООП)
	a) Single Responsibility Principle Для каждого класса должно быть определено единственное назначение. Все ресурсы, необходимые для его осуществления, должны быть инкапсулированы в этот класс и подчинены только этой задаче.
	b) Open–Closed Principle Программные сущности должны быть открыты для расширения, но закрыты для модификации.
	c) Принцип подстановки Лисков. Наследующий класс должен дополнять, а не изменять базовый.
	d) разделения интерфейса
	e) Принцип инверсии зависимостей Зависимость на Абстракциях. Нет зависимости на что-то конкретное.
