Architecture knowledge
Что такое парадигма программирования?
На какие 2 группы можно разделить парадигмы? (императивная и декларативная) В чём между ними разница?
ООП. Как реализовано ООП в JS? 4 принципа ООП.
Функциональное программирование.
Чистые функции
Функциональная композиция
Избегание мутирования стейта
Избегание шеринга стейта
Избегание сайд эффектов
Функция первого класса
Функция высшего порядка
Что такое каррированная функция?







Что такое парадигма программирования?

Это набор принципов и методик по созданию кода.
Они нужны, чтобы упорядочить программу и сделать её структурированной, удобной и понятной другим программистам, работающим в той же парадигме. Важно, чтобы и для вычислительной машины программа была ясной, подготовленной к быстрому и точному исполнению.
--------------------------
На какие 2 группы можно разделить парадигмы? (императивная и декларативная) В чём между ними разница?

Что? Декларативный. Идёт от чел к машине
Как? императивный Наоборот
всё зависит от контектста

Если кратко, то императивная программа содержит прямые указания, что должен сделать компьютер и в каком порядке должны выполняться инструкции.

Декларативная же программа состоит из ограничений и правил, из которых компьютер генерирует способ получения результата.


--------------------------

ООП

Основная идея ООП заключается в том, что мы используем объекты для отображения моделей из реального мира в наших программах и/или упрощения доступа к функциям, которые в противном случае было бы трудно или невозможно использовать.

инкапусуляция
наследование
полиморфизм (помогает проектировать объекты таким образом, чтобы они могли совместно использовать или переопределять любое поведение с конкретными предоставленными объектами)
	-мнимый ad-hoc
	-параметрический
абстракция (позволяет работать с объектами не вдаваясь в особенности реализации)

--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------
ФУНКЦИОНАЛЬНОЕ ПРОГРАММИРОВАНИЕ

Это парадигма программирования
Функциональное программирование предполагает обходиться вычислением результатов функций от исходных данных и результатов других функций, и не предполагает явного хранения состояния программы. Соответственно, не предполагает оно и изменяемости этого состояния.

Приемущество:
	- код легко читать 
	- тестирование упрощается.
Всё потому, что действия, производимые функцией, не зависят от внешнего состояния. Выполнение кода становится более предсказуемым, а неожиданные побочные эффекты — менее вероятными.

Принципы: 
- функции чистые
- все функции: 
	первого класса (возможность быть объявленной в виде переменной)
	высшего порядка (map filter)
- Переменные неизменяемы (благодаря этому вы можете быть уверены, что никакая переменная не изменится.)
- прозрачность функций
	
--------------------------
ЧИСТАЯ ФУНКЦИЯ

Принципы:

— Иммутабельность. Функция не меняет глобальные переменные.
- Каждый раз функция возвращает одинаковый результат, когда она вызывается с тем же набором аргументов - это детерминированность(предсказуемость) или идемпотентность
— Нет побочных эффектов
	Видоизменение входных параметров
	HTTP вызовы (AJAX/fetch)
	console.log например
	Изменение в файловой системе
	Запросы DOM
- она что-то ретёрнит как правило
- глобальная переменная должна передаваться в качестве аргумента
--------------------------
Функциональная композиция

Это процесс передачи результата выполнения одной функции ко входу другой функции.
Это вложение функций, каждая из которых передает свой результат в качестве входных данных для другой функции.
Это способ с помощью которого из нескольких функций мы можем сделать одну, объеденив их в цепочку.

Для функциональной композиции принято использовать инструменты абстракции pipe() и compose(). Они делают код декларативным, программист описывает результат, а не реализацию.
--------------------------
Избегание мутирования стейта

список мутирующих методов массива

.copyWithin()
.fill()
.pop()
.push()
.reverse()
.shift()
.sort()
.splice()
.unshift()
--------------------------
Избегание шеринга стейта

Не использовать глобальные переменные.
Избегание прокидывания стейта в другие компоненты (я так понимаю это про реакт речь)


Общее состояние - это любая переменная, объект или пространство памяти, которое существует в общей области. Любая непостоянная переменная, используемая несколькими отдельными областями действия, включая глобальную область видимости и области закрытия, считается находящейся в общем состоянии. В функциональном программировании следует избегать общих состояний. Совместное состояние препятствует тому, чтобы функция была чистой. Когда правило общего состояния нарушается и программа изменяет переменную, возникает побочный эффект. В ООП общие состояния часто передаются как объекты. Функции ООП могут изменять общее состояние. Это очень противоречит правилам функционального программирования. Пример общего состояния показан в следующем фрагменте:

--------------------------
Избегание сайд эффектов

Видоизменение входных параметров
console.log
HTTP вызовы (AJAX/fetch)
Изменение в файловой системе
Запросы DOM
--------------------------

ФУНКЦИЯ ПЕРВОГО КЛАССА

Функции в JS — это объекты первого класса.

- Могут быть переданы другим функциям и их можно вернуть из функций
- Фича языка, позволяющая переменным содержать ссылки на функции.
- с ней можно обращаться как и с любым другим объектом.
--------------------------

ФУНКЦИЯ ВЫСШЕГО ПОРЯДКА

Это такая функция, которая принимает функцию как аргумент или возвращает функцию в виде выходного значения.

Это функции, которые могут принимать другие функции в качестве аргументов и возвращать другие функции в качестве результатов своей работы. Работа с другими функциями в функциях высшего порядка выглядит так же, как работа с любыми другими объектами.

высшего порядка (map filter reduce)
--------------------------

Каррированная функция 

Это преобразование функции с множеством аргументов в набор вложенных функций с одним аргументом.
Эти методы преобразования функций реализуются в JS благодаря замыканиям и благодаря тому, что функции в JS являются объектами первого класса (их можно передавать в качестве аргументов другим функциям, возвращать из них, присваивать переменным).
--------------------------