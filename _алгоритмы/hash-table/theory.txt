Хэш — таблица (мапа, словарь ) представляет собой структуру данных, которая отображает ключи на значения.
Хеш-таблицы эффективно объединяют операции поиска, вставки и удаления. Ключ отправляется в хеш-функцию, которая выполняет над ним арифметические операции.
Производительность хеш-таблицы зависит от трех фундаментальных факторов: хеш-функции, размера хеш-таблицы и метода обработки конфликтов.

Хеш-таблицы состоят из двух частей:
1. Объект: объект с таблицей, в которой хранятся данные.
2. Хеш-функция (или функция сопоставления): эта функция определяет индекс нашей пары ключ-значение. Это должна быть односторонняя функция и создавать разные хеш-коды для каждого ключа.


Хэш-функция используются:
Хэширование паролей
Проверка целостности файлов
Индексирование базы данных
Кеши
Уникальное представление данных
Поиск в несортированном массиве
Поиск в отсортированном массиве с использованием двоичного поиска

Хеш-таблицы против деревьев:
Хеширование и деревья выполняют аналогичную работу.
Деревья более полезны, когда приложению необходимо упорядочить данные в определенной последовательности. Хеш-таблицы — более разумный выбор для случайно отсортированных данных из-за организации пар ключ-значение.

Хеш-функция:
Хэш—фн представляет собой метод или функция, которая принимает ключ по элементу в качестве входных данных, присваивает индекс специфичный для данного ключа и возвращает индекс всякий раз, когда ключ ищется. Эта операция обычно возвращает тот же хэш для данного ключа. Хорошая хеш-функция должна эффективно вычислять и равномерно распределять ключи.
Хеш-функции помогают ограничить диапазон ключей границами массива, поэтому нам нужна функция, которая преобразует большой ключ в меньший. Это работа хеш-функции.

Коллизии хеш-таблиц:
Иногда хеш-функция может генерировать один и тот же индекс для нескольких ключей. Этот сценарий называется хеш-коллизией. Коллизии представляют собой проблему, потому что каждый слот в хеш-таблице должен хранить один элемент.
Конфликты хэша обычно обрабатываются с использованием четырех общих стратегий:
1. Линейное зондирование: при линейном зондировании пропускается уже заполненный индекс. Этого можно добиться, добавив значение смещения к уже вычисленному индексу
Недостаток: если вы не выберете смещение с умом, вы можете вернуться туда, откуда начали, и пропустить так много возможных позиций в массиве.
2. Цепочка: в стратегии цепочки каждый слот хеш-таблицы содержит указатель на другую структуру данных, такую ​​как связанный список или дерево.
Недостаток: увеличивает производительность, но требует больших затрат места.
3. Изменить размер списка или массива. Мы можем установить порог, и как только он будет превышен, мы можем создать новую таблицу, которая будет вдвое больше оригинальной. Все, что нам нужно сделать, это скопировать элементы из предыдущей таблицы.
Недостаток: функция требует больших затрат. Следовательно, нам нужно быть осторожными с порогом, который мы устанавливаем.
4. Двойное хеширование: в двойном хешировании есть две хеш-функции. Вторая используется для предоставления значения смещения в случае, если первая функция вызывает коллизию. Двойное хеширование может найти следующий свободный слот быстрее, чем метод линейного зондирования.

Далее можно посмотреть реализацию хеш-таблицы на javascript, а также реализация с помощью Bucket Chaining.
См реализация.js

Материалы:
https://bestprogrammer.ru/izuchenie/struktura-dannyh-101-realizatsiya-hesh-tablits-v-javascript



//
Гарвард. CS50 на русском. 0. Дополнительные видео. 3. Хеш-таблица. 3:11
Используем хэш-таблицы, если нас не волнует, будут ли отсортированы данные или нет