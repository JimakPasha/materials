------------------
    --- es 6(2015) (https://habr.com/ru/post/313526/)
------------------

- переход от var к let/const
Проблема var в том, что переменная "протекает" в другие блоки кода, такие как циклы for или блоки условий if
В ES6 не нужно использовать IIFE, достаточно использовать блоки и let

- бэктики и интерполяция можно использовать вместо конкатенации

- не нужно больше конкатенировать строки с + \n, можно использовать бэктики

- деструктуризация

- переход от “функций-конструкторов” к “классам”
добавление синтаксического сахара. class, constructor, extends и super для наследования

- промисы

- стрелочные функции добавлены
из-за проблемы с this

- добавление for…of

- параметры по умолчанию
раньше нужно было делать проверку параметров, но это не удобно + если параметр по умолчанию это булева переменная или если задать значение 0, то ничего не получится, нужно ещё делать проверку на undefined

- rest-параметры
в ES5 работать с переменным количеством аргументов неудобно

- операция spread
переходим от apply() к spread
можно объединять и разворачивать массивы и объекты таким образом

------------------
    --- es 7(2016) (https://habr.com/ru/company/ruvds/blog/353174/)
------------------

- метод массива includes
позволяет выяснить, имеется ли в массиве некий элемент, в отличие от indexOf, подходит и для работы со значениями NaN

- инфиксный оператор возведения в степень
он может служить заменой Math.pow(7, 2) => 7**2

------------------
    --- es 8(2017)
------------------

- Object.values()
похож на Object.keys(), но возвращает все значения собственных свойств объекта, исключая любые значения в цепочке прототипов

- Object.entries()
похож на метод Object.keys(), но вместо того, чтобы возвращать лишь ключи, он возвращает, в виде массива, и ключи, и значения

- метод String padStart() и padEnd()
padStart(первый аргумент это количество добавляемых символов перед основными символами, второй каких элементов)
padEnd(первый аргумент это количество добавляемых символов после основных символов, второй каких элементов)

- Object.getOwnPropertyDescriptors()
Главная причина добавления этого метода заключается в том, чтобы позволить создавать мелкие копии объектов и клонировать объекты, создавая новые объекты, при этом копируя, помимо прочего, геттеры и сеттеры.

- Завершающие запятые в параметрах функций

- Конструкция Async/Await

------------------
    --- es 9(2018)
------------------

- разделяемая память и атомарные операции

- устранение ограничений тегированных шаблонных строк

- флаг регулярных выражений dotAll

- захват именованных групп в регулярных выражениях

- работа со свойствами объектов с использованием оператора rest

- ретроспективная проверка в регулярных выражениях

- использование управляющих последовательностей Unicode в регулярных выражениях

- Promise.prototype.finally()

- асинхронная итерация
позволяет без труда создавать циклы, работающие с асинхронным кодом