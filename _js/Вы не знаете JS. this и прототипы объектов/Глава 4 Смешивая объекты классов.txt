Возможно, вы никогда не смотрели на классы как на "шаблон проектирования", так как чаще всего обсуждаются популярные "Oбъектно Oриентированные шаблоны проектирования", такие как "итератор", "наблюдатель", "фабрика", "синглтон" и т.д. При этом сразу предполагается, что OO классы являются механизмами более низкого уровня, с помощью которых мы реализуем все шаблоны проектирования (более высокого уровня), как будто OO является единственно-верной основой для всего (правильного) кода.

В действительности в JS классов нет. Это иллюзия классов.

Механика Классов
Во многих классовых языках "стандартная библиотека" предоставляет "стековую" структуру данных (push, pop и др.) как класс Stack.
Но в подобных языках вы на самом деле не работаете непосредственно со Stack (если только речь не идет о Static члене класса, но это выходит за рамки нашего обсуждения). Класс Stack - это просто абстрактное описание того, что должен делать любой "стек", но это не сам "стек". Вы должны создать экземпляр класса Stack, прежде чем у вас будет конкретная структура данных нечто для работы с ней.
Класс - это план. Чтобы на самом деле получить объект, с которым мы можем взаимодействовать, мы должны построить (иначе, "создать экземпляр") что-то из класса. Конечным результатом такой «конструкции» является объект(экземпляром), с помощью которого мы можем напрямую вызывать методы и обращаться к любым общедоступным свойствам данных при необходимости.
Этот объект является копией всех характеристик, описанных классом.

Конструктор
Экземпляры классов создаются специальным методом класса, обычно с тем же именем, что и класс, называемым конструктор. Задача этого метода - инициализировать любую информацию (состояние), которая понадобится экземпляру.
Конструкторы всегда нужно вызывать с помощью new, чтобы языковой движок знал, что вы хотите создать новый экземпляр класса.

Mixins - Примеси
Механизм объектов JS не автоматически выполняет поведение копирования, когда вы «наследуете» или «создаете экземпляр». Проще говоря, в JavaScript нет «классов» для создания экземпляров, только объекты. И объекты не копируются в другие объекты, они связываются вместе.
Поскольку наблюдаемое поведение классов в других языках подразумевает наличие копий, давайте рассмотрим, как разработчики JS подделывают поведение копирования отсутствующего в JS классах с помощью примесей(Mixins). Мы рассмотрим два типа «примесей»: явные и неявные.