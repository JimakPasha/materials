Объекты создаются двумя способами: декларативно (литерально) и с помощью конструктора.
Существует несколько других подтипов объектов, обычно называемых встроенными объектами. String Number Boolean Object Function Array Date RegExp Error
в JS это встроенные функции. Каждая из этих встроенных функций может быть использована как конструктор (ага, вызов функции с оператором new)
К счастью, при необходимости язык автоматически приводит примитив "string" к объекту String, а значит вам почти никогда не придется дополнительно создавать форму Объекта.

----------------------------------------------------------------------------------------
Дублирование объектов
----------------------------------------------------------------------------------------
Следует делить на глубокую копию и поверхностную(не глубокую).

Поверхностно можно копировать с помощью Object.assign(..)
Также поверхностно var newObj = JSON.parse( JSON.stringify( someObj ) );
Также можем не глубоко копировать с помощью spread оператора

----------------------------------------------------------------------------------------
Дескрипторы свойств «дескрипторы данных»
----------------------------------------------------------------------------------------
В ES5 все свойства описываются с помощью дескриптора свойств
Посмотреть все десрипторы Object.getOwnPropertyDescriptor( myObject, "a" ); (1 аргумент объект, второй свойство объекта)
в итоге мы получим объект с полями дескрипторами. по умолчанию они true
{
  value: 2,
  writable: true,
  enumerable: true,
  configurable: true
}

Определяет новое или изменяет существующее свойство Object.defineProperty(..) (1 аргумент объект, второй свойство объекта, 3ий объект с нашими свойствами дескрипторами) (! если configurable: true)

- Перезаписываемое
writable - false не позволит перезаписать свйоство
Наша попытка модифицировать value не удастся молча. В строгом режиме strict mode мы получим ошибку TypeError

- Конфигурируемое
Пока свойство является конфигурируемым, мы можем изменять описание дескриптора, используя всё тот же инструмент defineProperty(..)
Если мы перезаписали configurable на false, то мы уже ниже по коду не сможем сделать его true, это необратимо, это приведёт к TypeError.
! Configurable:false препятствует возможности использовать оператор delete для удаления существующего свойства
! Существует особенное исключение, о котором стоит помнить: если для свойства уже задано configurable:false, то writable может быть изменено с true на false без ошибки, но не обратно в true если оно уже false

- Перечисляемое
enumerable: true - этот параметр указывает, появится ли свойство в определенных перечислениях свойств объекта, таких как цикл for..in.
Однако если мы проверим с помощью in свойство, которое enumerable: false, то будет true. А при обходе циклом for..in его не будет.
Примечание: Использование циклов for..in с массивами может выдать неожиданный результат, поскольку перечисление массива будет включать не только все численные индексы, но также перечисляемые свойства. Хорошая идея использовать циклы for..in только с объектами, а традиционные циклы for для перебора по численным индексам значений, хранящихся в массивах.
  -- Еще один способ определить перечисляемые и неперечисляемые свойства:
    --- propertyIsEnumerable(..) проверяет существует ли данное имя свойства непосредственно в объекте и установлено ли enumerable:true
    --- Object.keys(..) возвращает массив всех перечисляемых свойств, в то время как Object.--- getOwnPropertyNames(..) возвращает массив всех свойств -- перечисляемых или нет.
    Object.keys(..) и Object.getOwnPropertyNames(..) проверяют только конкретный указанный объект, не заходят в [[Prototype]]

    Не существует (пока) встроенного способа получить список всех свойств, эквивалентного тому, как опрашивает оператор in (перебирая все свойства по всей цепочке [[Prototype]]. Приблизительно, такой инструмент можно сделать, если рекурсивно перебирать цепочку [[Prototype]] объекта и на каждом уровне выбирать список из Object.keys(..) -- только перечисляемых свойств.

----------------------------------------------------------------------------------------
Иммутабельность
----------------------------------------------------------------------------------------
Иногда требуется создать свойства или объекты, которые не могут быть изменены (случайно или преднамеренно). Важно отметить, что всё это - попытки создать неглубокую иммутабельность. Они влияют только на объект и характеристики его непосредственных свойств. Если объект содержит указатель на другой объект (массив, объект, функцию и т.д.), то содержимое другого объекта не будет затронуто и останется изменяемым.

Комбинируя writable:false и configurable:false вы по сути можете создать константу (не может быть изменена, переопределенна или удалена) в качестве свойства объекта

- Запрет расширения Object.preventExtensions(..) (аргументом помещаем объект). и в этот объект нельзя будет дописать другие свойства
Если попытаемся это сделать в нестрогом режиме, создание завершится неудачей без ошибок, в строгом режиме TypeError.

- Запечатывание 
Метод Object.seal(..) (принимает существующий объект аргументом) и применяет к нему Object.preventExtensions(..), но также помечает все существующие свойства как configurable:false.
Таким образом, вы не можете не только добавлять свойства, но и переконфигурировать или удалить существующие (хотя вы всё еще можете изменять их значения).

- Заморозка
Метод Object.freeze(..) (принимает существующий объект аргументом) и применяет к нему Object.seal(..), но также помечает все свойства как writable:false, так, что их значения не могут быть изменены.
Этот подход дает наивысший уровень иммутабельности, который вы можете получить для самого объекта, поскольку он предотвращает любые изменения в объекте или его непосредственных свойствах (хотя, содержимое любых других привязанных объектов не затрагивается, но можно все вложенные obj рекурсивно пройтись и заморозить и их).

----------------------------------------------------------------------------------------
[[Get]] [[Put]]
----------------------------------------------------------------------------------------
Как происходит доступ к свойствам?
Стандартная встроенная операция [[Get]], проверяет объект на наличие запрашиваемого свойства и если находит его, то возвращает соответствующее значение, а если не находит, то undefined.
Но вдруг мы в свойство явно укажем a: undefined. И когда будем выводить obj.a, то будет undefined, как мы поймем присвоили мы так или его действительно нет?
Мы можем спросить есть ли у объекта свойство, не запрашивая значение свойства:
- ("a" in myObject) вернёт true или false в зависимости от того, есть или нет
оператор in проверит по всей цепочке [[Prototype]]. Также надо знать , что оператор in выглядит так, будто он проверяет существование значения внутри контейнера, но на самом деле он проверяет существование имени свойства.
- hasOwnProperty(..) тоже ищет свойство, но не заходит в [[Prototype]]
- Но можно создать объект, который не привязан к Object.prototype (с помощью Object.create(null)) В этом случае, вызвать метод myObject.hasOwnProperty(..) не получится. При таком сценарии более надежным способом выполнить подобную проверку будет Object.prototype.hasOwnProperty.call(myObject,"a"), который заимствует базовый метод hasOwnProperty и использует явную привязку this чтобы применить его к нашему myObject.

Поведение [[Put]] при вызове зависит от нескольких факторов, включая (наиболее значимый): существует ли такое свойство у объекта или нет.
Если свойство существует, то алгоритм [[Put]] проверит примерно следующее:
1. Является ли свойство дескриптором доступа (смотрите раздел «Геттеры и Сеттеры» ниже)? Если да, то вызовет сеттер, если он есть.
2. Является ли свойство дескриптором данных с ключом writable равным false? Если да, то тихо завершится в нестрогом режиме , TypeError в strict mode.
3. Иначе, установит значение существующего свойства как обычно.
Если свойство запрашиваемого объекта еще не задано, то операция [[Put]] еще более сложная и запутанная. Мы вернемся к этому сценарию в Главе 5, когда обсудим [[Prototype]], чтобы внести больше ясности.

----------------------------------------------------------------------------------------
Геттеры и Сеттеры (Свойства-аксессоры) «дескриптор доступа»
----------------------------------------------------------------------------------------
Геттеры -- это свойства, которые вызывают скрытую функцию для получения значения
Сеттеры -- это свойства, которые вызывают скрытую функцию для задания значения

Для дескрипторов доступа, характеристики дескриптора value и writable игнорируются, а вместо этого JS рассматривает характеристики свойства set и get (а также configurable и enumerable).
Кстати в Object.defineProperty также их можно задавать
