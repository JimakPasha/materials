Приложение A: Динамическая область видимости

function foo() {
	console.log( a ); // 2
}

function bar() {
	var a = 3;
	foo();
}

var a = 2;

bar();

Лексическая область видимости хранит информацию о том, что RHS-ссылка на a в foo() будет разрешена в глобальную переменную a, что приведет к тому, что будет выведено значение 2.

Динамическая область видимости, напротив, не интересуется тем как и где были объявлены функции и области видимости, а скорее интересуется тем откуда они будут вызываться. Иными словами, здесь цепочка областей видимости основана на стеке вызовов, а не на вложенности областей видимости в коде.

Итак, если бы в JavaScript была динамическая область видимости, то когда выполнилась бы foo(), теоретически нижеприведенный код привел бы к выводу 3.

function foo() {
	console.log( a ); // 3  (not 2!) в динамической области видимости (в лексической по прежнему 2)
}

function bar() {
	var a = 3;
	foo();
}

var a = 2;

bar();

Чтобы внести ясность, в JS нет, на самом деле, динамической области видимости. В нем есть лексическая область видимости. Проще некуда. Но механизм работы this немного похож на динамическую область видимости.
Ключевое сравнение: лексическая область видимости определяется временем написания кода, тогда как динамическая область видимости (и this!) определяется во время выполнения. Лексическую область видимости интересует где функция была объявлена, а динамическую — откуда была вызвана функция.