Глава 3: Область видимости: функции против блоков
- IIFE
- интересная штука в try, catch
- let
- сборка мусора

Объявления, сделанные с помощью let, не поднимаются во всей области видимости блока, в котором они появляются. Такие объявления очевидно не будут "существовать" в блоке до оператора объявления.

Функции — самые распространенные единицы области видимости в JavaScript. Переменные и функции, которые объявляются внутри другой функции, по существу "скрыты" от любой из окружающих "областей видимости", что является намеренным принципом разработки хорошего ПО.

Но функции — отнюдь не только единицы области видимости. Блочная область видимости ссылается на идею, что переменные и функции могут принадлежать произвольному блоку (обычно, любой паре { .. }) кода, нежели только окружающей функции.

Начиная с ES3, в структуре try/catch есть блочная область видимости в выражении catch.

В ES6 представлено ключевое слово let (родственница ключевого слова var), чтобы позволить объявления переменных в любом произвольном блоке кода. if (..) { let a = 2; } объявит переменную a, которая фактически похитит область видимости блока { .. } в if и присоединит себя к ней.

-------------------------------------------

https://habr.com/ru/company/ruvds/blog/337038/

Если говорить о ES6, то при использовании ключевых слов let и const переменные и константы неявно присоединяются к текущей блочной области видимости вместо функциональной области видимости. Это означает, что эти конструкции ограничены блоком, в котором они используются, будет ли это блок if, блок for, или функция. Вот пример, который поможет лучше это понять:

'use strict'

let condition = true;

function bar () {
  if (condition) {
    var firstName = 'John'; // Доступно во всей функции
let lastName = 'Doe'; // Доступно только в блоке if
    const fullName = firstName + ' ' + lastName; // Доступно только в блоке if
  }

  console.log(firstName); // John
  console.log(lastName); // ReferenceError
  console.log(fullName); // ReferenceError
}

bar();

-------------------------------------------

у var функционлаьная область видимости
у let и const блочная

if (true) {
  var bar = 1;
}
console.log(bar); // 1

if (true) {
  let bar = 1;
}
console.log(bar); // ReferenceError

