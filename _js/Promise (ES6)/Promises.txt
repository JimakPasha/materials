PROMISES

Промисы — это один из приемов работы с асинхронным кодом в JS. Они возвращают результат асинхронной операции. Промисы были придуманы для решения проблемы callback hell
Промис (promise) - это объект, представляющий результат успешного или неудачного завершения асинхронной операции. Асинхронная операция, упрощенно говоря, это некоторое действие, выполняется независимо от окружающего ее кода, в котором она вызывается, не блокирует выполнение вызываемого кода.

- У промиса есть три состояния: pending fulfilled rejected
- В качестве параметров конструктор промиса принимает resolve и reject
- Результат может быть обработан в методе .then, ошибка — в методе .catch. Метод .then также возвращает промис, поэтому мы можем использовать цепочку, состоящую из нескольких .then.

- Promise.all() - возвращает единый объект Promise, который объединяет набор промисов. Значения всех промисов возвращаются только если все они завершились успешно. Если хотя бы один reject, то пойдёт в catch
Promise.all([принимает набор промисов, промис1, промис2])then...
- Promise.allSettled - принимает набор промисов и выполняет их как единое целое, но возвращает объект со статусом и результатом промиса.
- Promise.race() также принимает несколько промисов, только возвращает первый завершенный промис (вне зависимости завершился от успешно или с ошибкой)
- Promise.any() принимает несколько промисов и возвращает первый успешно завершившийся промис. Если же все промисы завершились с ошибкой, то генерируется исключение типа AggregateError. С помощью свойства errors типа AggregateError можно получить в виде массива все ошибки, которые возникли в промисах.