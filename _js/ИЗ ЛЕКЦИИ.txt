-----------------
Типы данных:
-----------------
7 примитивов
2 объектов(ссылочные)

typeof позволяет определить примитив это или объект
исключение 1:
typeof null // 'object'

исключение 2:
typeof function() {} // 'function' хотя функция это объект, но так мы можем определить более специфический объект

Методы примитивов
(42).toString() // обязательно в скобки, иначе js может подумать что 42. это число с точкой. можно поставить .. или обернуть()
Под капотом JS за нас создаёт обёртку и уже с этой обёртки вызывает метод (new Number(42)).toString()
Мы можем сами вызывать эти обёртки const number = new Number(42); но лучше так не делать, т.к. в переменной number лежит объект, который представляет собой число, а объект вседа true. И представь, что мы создадим 0: const number = new Number(0);  и const number не будет false, как мы ожидаем
А если вызвать это без new? Тогда это будет функция преобразования типа.
Number('137') // 137

У объектов(ссылочных типов) можно вызывать конструкторы new Obj, new Function, но проще использовать литералы {}, [].

Большинство встроенных объектов можно вызвать без new
new Array(3,245, 545) // 3,245, 545
Array(3,245, 545) // 3,245, 545
Исключение: new Date() // obj  |   Date() // string

-----------------
Преобразование типов:
-----------------
ToBoolean
Любой объект всегда true
Всё true, кроме 7 falsy: '', null, undefined, false, NaN, 0, -0
toString
ToNumber
ToPrimitive
JSON.stringify

- toString
для примитивов кавычки добавит
для объектов ToPrimitive

- ToNumber
true/false преобразует 0/1
строку попробует конвертировать в число
для объектов ToPrimitive

- строку в число
пустая строка - 0
отбросит пробелы и попробует распознать число (но если символы числовые прерываются пробелом то - NaN)
хотя бы один символ будет неверный - NaN
чтобы распознать число до первого лишнего символа parseInt, parseFloat

+ Алгоритм ToPrimitive
вызывает Symbol.toPrimitive
либо использует valueOf, toString
Если метод вернул примитив, то подставить его выражение
при необходимости преобразовать примитив к др типу
если метод вернул объект, то вызвать др метод
если и второй метод возвращает объет, тогда Ошибка.

+ JSON.stringify 
метод можно рассмотреть как специфический метод преобразования

- ToBoolean
Boolean()
!!
if, for, while, do/while
тернарный оператор
Левая часть && ||

-----------------
Символы:
-----------------
вызывается всегда без new, и мы передаём метку которая позволит определить что конкретно делает этот символ
const s1 = Symbol('apple');
const object = {};
object[s1] = 'asdasd'
object // {Symbol(apple): 'asdasd'}