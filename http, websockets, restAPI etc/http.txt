ОПРЕДЕЛЕНИЕ

http протокол - протокол передачи данных (гипертекста). соглашение о формате текстовых файлов, которые ходят между клиент-сервером (набор правил передачи информации между браузером пользователя и сервером сайта).

________________
ДЛЯ ЧЕГО

HTTP протокол используется для передачи данных в интернете, изначально он использовался для передачи HTML документов, но сейчас он позволяет передавать различный контент и различные типы данных.
________________

Характеристики HTTP протокола

1) HTTP протокол работает по технологии клиент-сервер. (в основе взаимодействия клиент-сервер лежит принцип того, что такое взаимодействие начинает клиент, а правила, по которым происходит взаимодействие описывает протокол. Существует два вида архитектуры взаимодействия клиент-сервер: первый получил название двухзвенная архитектура клиент-серверного взаимодействия, второй – многоуровневая архитектура клиент-сервер. Принцип работы двухуровневой архитектуры взаимодействия клиент-сервер заключается в том, что обработка запроса происходит на одной машине без использования сторонних ресурсов. Двухзвенная архитектура предъявляет жесткие требования к производительности сервера, но в тоже время является очень надежной. Если говорить про многоуровневую архитектуру взаимодействия клиент-сервер, то в качестве примера можно привести любую современную СУБД (за исключением, наверное, библиотеки SQLite, которая в принципе не использует концепцию клиент-сервер).  Суть многоуровневой архитектуры заключается в том, что запрос клиента обрабатывается сразу несколькими серверами. Такой подход позволяет значительно снизить нагрузку на сервер из-за того, что происходит распределение операций, но в то же самое время данный подход не такой надежный, как двухзвенная архитектура.)
2) HTTP протокол относится к седьмому уровню модели OSI.
3) HTTP протокол относится к семейству протоколов TCP/IP.
4) Для передачи данных по протоколу HTTP используется порт 80 TCP или 8080.
5) Спецификация протокола RFC 2616.
6) Для идентификации ресурса HTTP протокол использует URI.
7) HTTP протокол не имеет промежуточных состояний между запросом и ответом, конечно, клиент может получить ответ с кодом 100, но это ведь уже ответ, а не промежуточное состояние.
8) HTTP протокол синхронный, но позволяет клиенту отправлять несколько запросов подряд, не дожидаясь ответа сервера, при условии, что сервер даст ответы на запросы в том порядке, как они приходили.


________________

Стандарты HTTP

1) Стандарт HTTP/0.9 – разработан в 1991 в ЦЕРН Тимом Бернерсом-Ли. Тим разработал HTTP протокол для облегчения доступа и создания навигации при помощи гипертекста. Стандарт HTTP/0.9 содержит в себе основы синтаксиса и семантики протокола HTTP.
2) стандарт HTTP/1.0 - В 1996 был выпущен информационный документ RFC 1945.
3) версия протокола HTTP 1.1 - В 1997 была выпущена : был разработан стандарт HTTP/1.1 и описан он в документе RFC 2068. В 1999 году был доработан стандарт HTTP/1.1 (именно стандарт HTTP/1.1). На данный момент большинство приложений для своей работы используют HTTP протокол версии 1.1. Кстати, HTTP приложения могут себя идентифицировать, посылая информацию о себе в заголовке.
4) 2015 году была опубликована финальная версия черновика протокола HTTP 2, это еще не стандарт, но черновик нам «показывает» куда будет двигаться развитие интернета.

________________
Клиенты (тоже самое - агент пользователя) HTTP протокола - это браузеры

________________
Серверы HTTP протокола

Серверы HTTP протокола можно условно разделить на два вида: исходные сервера и прокси-сервера. К исходным серверам относятся те сервера, к которым непосредственно обращается клиент, прокси-сервера HTTP – это транзитные сервера между клиентом и тем сервером, к которому он желает обратиться. Зачастую бывает так, что HTTP сервер выполняет одновременно функцию и конечного сервера, и прокси-сервера, а иногда и клиента.

Вот примеры конечных HTTP серверов:

Apache HTTP Server;
CERN httpd;
nginx;
lighthttod.

Давайте посмотрим на прокси-сервера:

Squid;
UserGate;
nginx.

________________
Требования HTTP протокола

HTTP протокол имеет требования к приложениям, которые используют его для передачи данных. Требований в HTTP очень много, но требования можно разделить на три категории: необходимые требования,  это такие требования, которые должны выполняться всеми программами; рекомендуемые требования, это те требования, которые следует выполнять приложениям и возможные требования, которые могут не выполняться приложениями.

________________
Структура HTTP протокола (HTTP сообщения)

структура HTTP протокола – это сообщение плюс соединение. Сообщение обычно состоит из трех частей, которые передаются и клиентами, и серверами в следующем порядке:

1) Стартовая строка или строка состояния, которая определяет тип HTTP сообщения. Стартовая строка обязательна для любого сообщения.
2) Заголовок HTTP сообщения, который может включать одно поле Host или несколько полей для передачи различной служебной информации.
3) Тело HTTP сообщения, которое содержит HTTP объекты. Тело сообщения служит для передачи пользовательской информации и есть не у каждого HTTP сообщения.

________________
Параметры HTTP протокола

У HTTP протокола есть параметры, которые являются механизмом управления взаимодействия между клиентом и сервером. И которые определяют то, в каком виде информация будет передана по HTTP протоколу:

1) Версия HTTP протокола является его обязательным параметром и указывается в первой строке любого HTTP сообщения.
2) URI – это параметр, который позволяет однозначно идентифицировать ресурс, который хочет запросить клиент.
3) Дата и время – это тоже параметр HTTP протокола.
4) HTTP протокол имеет параметры кодирования сообщений и кодирования передачи.
5) Тип данных или медиа тип
6) Лексемы программ позволяют определить разработчика HTTP приложения и версию приложения, а еще лексема является параметром HTTP протокола.
7) HTTP протокол имеет параметры, которые позволяют определить язык сообщения, в HTTP это называется метка языка.
8) А еще в HTTP есть единицы измерения диапазонов, которые позволяют запросить только часть ресурса.

________________
Как происходит общение по протоколу HTTP: HTTP сообщение, HTTP запрос и HTTP ответ

________________
Методы в HTTP протоколе

Методы в HTTP протоколе определяет способ обращения клиента к серверу и, соответственно, какую информацию хочет получить или передать клиент серверу.HTTP сервер можно настроить так, чтобы он выполнял некоторые методы, а некоторые игнорировал, это сделано в целях безопасности. Такие настройки можно производить, как для сервера целиком, так и для отдельных ресурсов на HTTP сервере.

Методы в HTTP протоколе делятся на безопасные и идемпотентные. К безопасным относятся методы GET и HEAD, потому что они используются лишь для получения содержимого или его характеристик от сервера, а идемпотентные методы, это такие методы HTTP протокола, которые в случае своего многократного использования к ресурсу на одном и том же URI от одного и того же клиента будут давать такую же нагрузку, как будто этот метод выполнился только один раз, к идемпотентным методам HTTP протокола относятся: GET, HEAD, PUT, DELETE, OPTIONS и TRACE.


--GET--
Позволяет получать информацию с HTTP сервера. Информация может быть любой, главное, чтобы она была в форме HTTP объекта, доступ к информации при использовании метода GET осуществляется через URI.

HTTP метод GET бывает двух видов: условный метод GET и частичный метод GET.

- Когда используется условный HTTP метод GET, то к HTTP сообщению добавляются следующие поля заголовков: If-Modified-Since, If-Unmodified-Since, If-Match, If-None-Match, или If-Range. Значение таких полей является какое-либо условие и если это условие выполняется, то происходит передача объекта, который хранится по указанному URI, если же условие не выполняется, то и сервер не передает никаких данных. Условный HTTP метод GET предназначен для уменьшения нагрузки на сеть.

- Особенность частичного метода GET заключается в том, что в его заголовке присутствует поле Range. Когда используется частичные метод GET полезная информация, предназначенная для человека передается кусками, после чего она из этих кусков собирается. Не напоминает ли это вам скачивание файлов по HTTP протоколу, когда мы можем остановить загрузку, отключить браузер, потом опять включить браузер и закачка будет происходить ровно с того места, где она была приостановлена.

--HEAD--
Работает точно так же, как и метод GET, с той лишь разницей, что сервер в ответ не посылает тело HTTP сообщения.

--POST--
Всё что изменяет состояние запроса не должно быть get
HTTP метод POST позволяет отправлять данные на сервер. 
Для:
оставлять сообщения на различных Интернет-ресурсах;
передавать информацию о себе, заполняя HTML формы;
То, как будет работать метод POST определяется исключительно на стороне сервера и обычно зависит от запрашиваемого URI. Если сравнить URI, которому обращается клиент и сообщение, которое он хочет отправить с файловой системой, то URI – это папка, а сообщение клиента – это файл, который лежит в папке.
В результате выполнения HTTP метода POST сервер не обязательно в качестве ресурса выдает URI, код состояния сервера при использовании HTTP метода POST может быть 200 (в этом случае вы получите какой-либо ресурс), либо 204 (в этом случае вы не получите никакого содержимого).

--PUT--
Используется для загрузки содержимого запроса на указанный в этом же запросе URI.
Т.е. HTTP запрос с методом PUT уже заранее содержат в теле сообщения какой-то объект, который должен быть сохранен на сервере по адресу, который указан в URI. Если запрос с HTTP методом PUT обращается к не существующему URI, то сервер создает новый URI и сообщает об этом клиенту. Если ресурс успешно создан по средствам метода PUT, то сервер возвращает ответ с кодом состояния 201, если ресурс успешно модифицирован, то сервер вернет код 200, либо 204. Если по каким-либо причинам серверу не удается создать ресурс, то в ответ клиенту он высылает описание проблемы, возможно, с кодом ошибки клиента или кодом ошибки сервера.

--DELETE--
Используется для удаления ресурса, указанного в URI.
Действие метода DELETE может быть отменено вмешательством администратора HTTP сервера или программным кодом. Даже в том случае, когда сервер отправит вам код 200 после обработки метода DELETE, это не будет означать, что ресурс удален, это всего лишь означает, что сервер вас понял и обработал ваш запрос.

--OPTIONS--
используется для получения параметров HTTP соединения и другой служебной информации.
Особенность HTTP метода OPTIONS заключается в том, что он не производит никаких действий с самим ресурсом (если браузер будет использовать метод OPTIONS, то он даже не станет загружать страницу).
Сервер отвечает на запрос с методом OPTIONS только опциями соединения, например он посылает поля заголовков Allow, но не пошлет Content-Type.

--TRACE--
Он позволяет видеть клиенту, что происходит в каждом звене цепочки между компьютером клиента и конечным получателем, для этого существует специальное поле Via.

--CONNECT--
Используется для преобразования HTTP соединения в прозрачный TCP/IP туннель. Данный метод используется в основном для шифрования соединения.

________________
Коды состояния в HTTP протоколе

1 информационные (когда запрос получен, но еще не обработан)
2 успешные (успешно принял и обработал HTTP сообщение клиента)
3 перенаправление (нужны дополнительные действия, чтобы завершить процесс обработки HTTP запроса)
4 ошибка клиента
5 ошибка сервера
________________
ЗАГОЛОВКИ HTTP сообщения
В протоколе HTTP есть поля заголовка, которые позволяют настроить взаимодействие между клиентом и сервером, а так же то, как и в каком виде полезную информацию будет получать конечный пользователь. Общий синтаксис полей заголовка довольно прост.

Имя поля: значение1, значение2

HTTP протокол делит поля заголовка на четыре группы:

1) Общие поля заголовка. Такие заголовки могут быть использованы в любых сообщениях, передаваемых по HTTP протоколу.
2) Поля заголовка запросов. Эти сообщения могут быть переданы только в запросах HTTP протокола.
3) Поля заголовка ответов. Как понятно из названия, эти поля используются только при HTTP ответах.
4) Поля заголовка тело сообщения. А эти поля используются тогда, когда необходимо определить, как и в каком виде будет представлена информация конечному пользователю, которая передается по HTTP.
________________
________________
________________
________________
________________
________________
________________


https - поддерживает шифрование с повышенным уровнем безопасного обмена данными. Домены, на которых установлен SSL-сертификат, являются платформой для применения данного расширения.
Преимущества: 1)Гарантированная безопасность, 2)Защита от хакерских атак, направленных на прослушивание соединения, 3)Поисковые системы настоятельно рекомендуют всем ресурсам перейти на HTTPS протокол

SSL-сертификаты имеют несколько разновидностей.

https://zametkinapolyah.ru/servera-i-protokoly/chto-nuzhno-znat-pro-http-protokol-veb-razrabotchiku-pravila-http-protokola.html#_HTTP-9
https://zametkinapolyah.ru/servera-i-protokoly/terminologiya-http-http-terminy.html
https://medium.com/@twanttobealighi/%D0%B2%D1%81%D1%91-%D1%87%D1%82%D0%BE-%D0%BD%D1%83%D0%B6%D0%BD%D0%BE-%D0%B7%D0%BD%D0%B0%D1%82%D1%8C-%D0%BF%D1%80%D0%BE-http-75567dad34c





-------------------------------------------------------------------

Ключевые различия между GET и POST методом в HTML

- Метод GET помещает параметры в URI, а метод POST добавляет параметры в тело.
- GET в основном используется для получения информации. В отличие от этого, целью метода POST является обновление данных.
- Результаты запроса POST не могут быть добавлены в закладки, тогда как результаты запроса GET могут быть добавлены в закладки, потому что они существуют в форме URL.
- В методе GET информация отображается в URL, что увеличивает уязвимости и риск взлома. В отличие от этого, метод POST не отображает переменную в URL, и в нем также можно использовать несколько методов кодирования, что делает его устойчивым.
- Размер переменной в методе GET составляет около 2000 символов. И наоборот, метод POST допускает переменный размер до 8 Мб.
- Данные метода GET кэшируются, а данные метода POST нет.

-------------------------------------------------------------------

Ключевые различия между PUT и PATCH

- PUT заменить ВЕСЬ РЕСУРС новым предоставленным представлением
- PATCH заменить части исходного ресурса указанными значениями
