GIT

разница git rebase и git merge
merge - создаёт коммит слияния, новый коммит, с новым хэшом (может сильно засорять историю коммитов)
rebase - он приклеивает наши коммиты к тому к кому ребэйсимя (не засоряем историю коммитов) (опасно работать если работает над одной веткой несколько разрабов, т.к. мы меняем историю. надо будет делать с forceм)


Перемещение по имени коммита
git checkout c312412

перемещение на коммит раньше
git checkout название ветки^

перемещение на несколько коммитов раньше
git checkout HEAD~4

Можно напрямую прикрепить ветку к коммиту при помощи опции -f. Например, команда:
git branch -f main HEAD~3

Можно ветку к определённому коммиту привязать
git branch -f main хэшкоммита

git reset 
git reset отменяет изменения, перенося ссылку на ветку назад, на более старый коммит. Это своего рода "переписывание истории"; git reset перенесёт ветку назад, как будто некоторых коммитов вовсе и не было.
git reset HEAD~1

git revert
Reset отлично работает на локальных ветках, в локальных репозиториях. Но этот метод переписывания истории не сработает на удалённых ветках, которые используют другие пользователи.
Чтобы отменить изменения и поделиться отменёнными изменениями с остальными, надо использовать git revert. 
Реверт создаст новый коммит противоположный изменениям, от которого мы хотим избавиться
git revert HEAD

Git Cherry-pick
git cherry-pick <Commit1> <Commit2> <...>
Это очень простой и прямолинейный способ сказать, что ты хочешь копировать несколько коммитов на место, где сейчас находишься (HEAD). Мы обожаем cherry-pick за то, что в нём очень мало магии и его очень просто понять и применять.

интерактивный rebase
Если хэши коммитов не известны и cherry-pick не можем из-за этого сделать
git rebase -i HEAD~4

git commit --amend
Внести изменения при помощи

git tag v1 хэш-коммита

Теги являются прекрасными ориентирами в истории изменений, поэтому в git есть команда, которая показывает, как далеко текущее состояние от ближайшего тега. И эта команда называется git describe

-----------------------
УДАЛЁННЫЙ РЕПО
-----------------------

git fetch 
синхронизирует локальное представление удалённых репозиториев с тем, что является актуальным на текущий момент времени.
Он не сливает их с какими-либо вашими наработками и не модифицирует то, над чем вы работаете в данный момент.

git pull
заключает в себе две команды
- git fetch
- git merge
он подтягивает изменения и объединяет

git pull --rebase
заключает в себе две команды
- git fetch
- git rebase

git push
публикация работы, загрузка на удалённый репо

удалённые ветки
git checkout -b totallyNotMain o/main

-u
флаг (развёрнуто называется set-upstream), если мы его устанавливаем при команде например git push -u origin main, значит потом мы можем push делать без указания origin main, a просто git push, и он запушит на эту ветку 

	

Remote Rejected!
